-- VIEW : 단순뷰(테이블1개로 만듦) VS. 복합뷰(테이블2개이상으로 만듦)
SELECT * FROM EMP;

-- EMP테이블로부터 부서번호가 20번인 사원정보를 담는 VIEW : EMPv1
CREATE OR REPLACE VIEW EMPv1
    AS SELECT * FROM EMP WHERE DEPTNO=20;
SELECT SUM(SAL) FROM EMPv1; -- 읽기가능
INSERT INTO EMPv1 (EMPNO, ENAME, DEPTNO) VALUES (9999,'홍',20); --쓰기가능
SELECT * FROM EMPv1;
SELECT * FROM EMP;
INSERT INTO EMPv1 (EMPNO, ENAME, DEPTNO) VALUES (9998,'박',30);-- 조건맞지 않는 쓰기
UPDATE EMPv1 SET SAL=5000 WHERE ENAME='홍'; -- 수정 가능
DELETE FROM EMPv1 WHERE ENAME='홍';         -- 삭제 가능

-- EMP테이블로부터 부서번호가 30번인 사원정보를 담는 VIEW : EMPv2 (OPTION추가)
CREATE OR REPLACE VIEW EMPv2
    AS SELECT * FROM EMP WHERE DEPTNO=30
    WITH CHECK OPTION; -- 서브쿼리의 조건이 만족할 경우만 쓰기 가능
SELECT * FROM EMPv2;
INSERT INTO EMPv2 (EMPNO, ENAME, DEPTNO) VALUES (9997, '김',30);
INSERT INTO EMPv2 (EMPNO, ENAME, DEPTNO) VALUES (9996, '류',10);-- 조건에 맞지 않는 것 불가

-- EMP테이블의 사번, 이름, 부서번호, 직책을 담는 VIEW : EMPv3 (읽기전용)
CREATE OR REPLACE VIEW EMPv3
    AS SELECT EMPNO, ENAME, DEPTNO, JOB FROM EMP
    WITH READ ONLY;
SELECT * FROM EMPv3, DEPT WHERE DEPT.DEPTNO=EMPv3.DEPTNO;
INSERT INTO EMPv3 VALUES (8888, '진',10, 'CLERK'); -- 쓰기 불가
SELECT * FROM EMPv3;
UPDATE EMPv3 SET JOB='XXXX' WHERE ENAME='박'; -- 쓰기 불가
DELETE FROM EMPv3 WHERE ENAME='박';           -- 쓰기 불가

-- EMP테이블에서 EMPNO, ENAME, DEPTNO정보를 10번부서번호인 사원 담은 VIEW : EMPv4
CREATE OR REPLACE VIEW EMPv4
    AS SELECT EMPNO, ENAME, DEPTNO FROM EMP WHERE DEPTNO=10
    WITH CHECK OPTION;
INSERT INTO EMPv4 VALUES (8888, '홍', 10);
SELECT * FROM EMP;

-- NOT NULL 제약조건인 필드를 포함하지 않는 VIEW : INSERT 가 안 됨
-- 단순뷰의 경우 NOT NULL인 필드는 반드시 포함.
CREATE OR REPLACE VIEW EMPv5
    AS SELECT ENAME, JOB, MGR FROM EMP WHERE DEPTNO=10
    WITH CHECK OPTION;
SELECT * FROM EMPv5;
INSERT INTO EMPv5 (ENAME, JOB, MGR) VALUES ('오', 'MANAGER', 7839);

-- 서브쿼리에 표현식이 들어간 뷰 : SALv1 (사번, 이름, 연봉)
CREATE OR REPLACE VIEW SALv1
    AS SELECT EMPNO, ENAME, SAL*12+NVL(COMM,0) YEAR_SAL FROM EMP;
SELECT * FROM SALv1;
INSERT INTO SALv1 VALUES (7979,'유',10000); -- YEAR_SAL 때문에 입력 불가
UPDATE SALv1 SET YEAR_SAL=10000 WHERE ENAME='SMITH'; -- 수정 불가
DELETE FROM SALv1 WHERE ENAME='박';

-- 서브쿼리에 그룹함수(group by절)가 들어간 뷰 : EMPv6 (부서번호, 최고급여, 최저급여, 급여평균)
CREATE OR REPLACE VIEW EMPv6
    AS SELECT DEPTNO, MAX(SAL) MAXSAL, MIN(SAL) MINSAL, AVG(SAL) AVGSAL
                FROM EMP GROUP BY DEPTNO;
SELECT * FROM EMPv6;
DELETE FROM EMPv6 WHERE DEPTNO=10; -- 그룹함수를 이용한 뷰는 불가(DELETE,INSERT,UPDATE)

-- 서브쿼리에 DISTINCT 가 들어간 뷰 : EMPv7
CREATE OR REPLACE VIEW EMPv7
    AS SELECT DISTINCT JOB, DEPTNO FROM EMP;
SELECT * FROM EMPv7;
DELETE FROM EMPv7 WHERE JOB IS NULL; --DISTINCT 이용한 뷰는 불가(DELETE,INSERT,UPDATE) 

-- 복합뷰(테이블 2개 이상을 이용한 서브쿼리)
-- 사번, 이름, 직책, 입사일, 부서이름
CREATE OR REPLACE VIEW EMPvDEPT
    AS SELECT EMPNO, ENAME, JOB, HIREDATE, DNAME FROM DEPT D, EMP E
                                        WHERE E.DEPTNO=D.DEPTNO;
SELECT * FROM EMPvDEPT;

-- 부서별로 부서명, 최소급여, 최대급여, 부서평균급여를 포함하는 뷰, DEPTv1를 생성하시오
CREATE OR REPLACE VIEW DEPTv1
    AS SELECT DNAME, MIN(SAL) MINS, MAX(SAL) MAXS, AVG(SAL) AVGS
        FROM EMP E, DEPT D
        WHERE E.DEPTNO=D.DEPTNO
        GROUP BY DNAME;
SELECT * FROM DEPTv1;

-- 1. 부서명과 사원명을 출력하는 용도의 뷰, DNAME_ENAME_VU 를 작성하시오
CREATE OR REPLACE VIEW DNAME_ENAME_VU
    AS SELECT DNAME, ENAME FROM EMP E, DEPT D WHERE E.DEPTNO=D.DEPTNO;
SELECT * FROM DNAME_ENAME_VU;

-- 2. 사원명과 직속상관이름을 출력하는 용도의 뷰,  WORKER_MANAGER_VU를 작성하시오
CREATE OR REPLACE VIEW WORKER_MANAGER_VU
    AS SELECT W.ENAME WORKER, M.ENAME MANAGER
        FROM EMP W, EMP M WHERE W.MGR=M.EMPNO;
SELECT * FROM WORKER_MANAGER_VU;
CREATE OR REPLACE VIEW WORKER_MANAGER_VU
    AS SELECT ENAME, (SELECT DISTINCT ENAME FROM EMP WHERE EMPNO=E.MGR) MANAGER
            FROM EMP E;

-- inline view : FROM 절에서의 SUB QUERY
-- 급여가 2000을 초과하는 사원에 대해 급여 평균 출력
SELECT SAL FROM EMP WHERE SAL>2000;
SELECT AVG(SAL) FROM (SELECT SAL FROM EMP WHERE SAL>2000);

-- EX. 부서급여평균보다 높은 사원의 이름, 급여, 부서번호를 출력
SELECT ENAME, SAL, DEPTNO FROM EMP E
    WHERE SAL > (SELECT AVG(SAL) FROM EMP WHERE DEPTNO=E.DEPTNO);
    
-- EX. 부서급여평균보다 높은 사원의 이름, 급여, 부서번호, 부서평균를 출력
SELECT ENAME, SAL, DEPTNO FROM EMP;
SELECT DEPTNO, AVG(SAL) FROM EMP GROUP BY DEPTNO;

SELECT ENAME, SAL, E.DEPTNO, AVGSAL
    FROM EMP E,(SELECT DEPTNO, AVG(SAL) AVGSAL FROM EMP GROUP BY DEPTNO) A
        WHERE E.DEPTNO=A.DEPTNO AND SAL>AVGSAL;

-- 이름, 부서번호, 부서명
SELECT ENAME, E.DEPTNO, DNAME FROM EMP E, DEPT D 
    WHERE E.DEPTNO=D.DEPTNO;
    
-- TOP - n 구문
SELECT ENAME, SAL FROM EMP ORDER BY SAL;
SELECT ROWNUM, ENAME, SAL FROM EMP ORDER BY SAL;

-- SAL에 따른 등수 출력 (INLINE VIEW를 이용, RANK, DENSE_RANK, ROW_NUMBER 함수)
SELECT ROWNUM RANK, ENAME, SAL FROM (SELECT * FROM EMP ORDER BY SAL DESC);
SELECT ENAME, SAL, RANK() OVER(ORDER BY SAL DESC) RANK,
                DENSE_RANK() OVER(ORDER BY SAL DESC) DENSE_RANK,
                ROW_NUMBER() OVER(ORDER BY SAL DESC) ROW_NUMBER FROM EMP;
                
-- SAL이 1등~5등(이름, 급여, 등수)
SELECT ENAME, SAL FROM EMP ORDER BY SAL DESC;
SELECT ENAME, SAL, ROWNUM FROM (SELECT ENAME, SAL FROM EMP ORDER BY SAL DESC)
    WHERE ROWNUM<=5;
    
-- SAL이 6등~10등(이름, 급여, 등수)
SELECT ENAME, SAL, ROWNUM FROM (SELECT ENAME, SAL FROM EMP ORDER BY SAL DESC)
    WHERE ROWNUM BETWEEN 6 AND 10;

-- 1단계 : 
SELECT ENAME, SAL FROM EMP ORDER BY SAL DESC;

-- 2단계 : 1단계를 inline view로
SELECT ROWNUM RN, ENAME, SAL 
    FROM (SELECT ENAME, SAL FROM EMP ORDER BY SAL DESC);
    
-- 3단계 : 2단계를 inline view로
SELECT ROWNUM, RN, ENAME, SAL
    FROM (SELECT ROWNUM RN, ENAME, SAL 
            FROM (SELECT ENAME, SAL FROM EMP ORDER BY SAL DESC))
    WHERE RN BETWEEN 1 AND 5;

-- 4. 사원테이블에서 사번, 사원명, 입사일을 입사일이 최신에서 오래된 사원 순으로 정렬하시오
SELECT EMPNO, ENAME, HIREDATE FROM EMP ORDER BY HIREDATE DESC;

-- 5. 사원테이블에서 사번, 사원명, 입사일을 입사일이 최신에서 오래된 사원 5명을 출력하시오
SELECT EMPNO, ENAME, HIREDATE 
    FROM (SELECT * FROM EMP ORDER BY HIREDATE DESC)
    WHERE ROWNUM<=5;
    
SELECT RN, EMPNO, ENAME, HIREDATE 
    FROM (SELECT ROWNUM RN, A.*
                FROM (SELECT * FROM EMP ORDER BY HIREDATE DESC) A) 
    WHERE RN BETWEEN 1 AND 5;
    
-- 6. 사원 테이블에서 사번, 사원명, 입사일을 최신부터 오래된 순으로 
     -- 6번째로 늦은 사원부터 10번째 사원까지 출력
SELECT RN, EMPNO, ENAME, HIREDATE
    FROM (SELECT ROWNUM RN, EMPNO, ENAME, HIREDATE 
                FROM (SELECT EMPNO, ENAME, HIREDATE FROM EMP ORDER BY HIREDATE DESC))
    WHERE RN BETWEEN 6 AND 10;
    
-- 부서별로 급여 합계와 급여 합계 순위
SELECT DEPTNO, SUM(SAL) SUMSAL FROM EMP GROUP BY DEPTNO ORDER BY SUM(SAL) DESC;

SELECT DEPTNO, SUMSAL, ROWNUM 순위
    FROM (SELECT DEPTNO, SUM(SAL) SUMSAL 
                    FROM EMP GROUP BY DEPTNO ORDER BY SUM(SAL) DESC)
    ORDER BY DEPTNO;   

-- sequence : 순차저거인 번호를 자동으로 생성하는 객체
DROP SEQUENCE SEQ_FRIENDS;
CREATE SEQUENCE SEQ_FRIENDS 
        START WITH 1
        INCREMENT BY 1
        MAXVALUE 9999
        MINVALUE -9999;
        
-- 시퀀스의 다음값은?
SELECT SEQ_FRIENDS.NEXTVAL FROM DUAL;

-- 현재 시퀀스 값은?
SELECT SEQ_FRIENDS.CURRVAL FROM DUAL;

CREATE TABLE FRIENDS(
    ID NUMBER(4) PRIMARY KEY, -- 순차번호 1~9999까지
    NAME VARCHAR2(20) NOT NULL,
    TEL VARCHAR2(20) UNIQUE,
    LAST_MODIFIED DATE DEFAULT SYSDATE);
    
CREATE SEQUENCE SEQ_FRIENDS MAXVALUE 9999;
SELECT * FROM FRIENDS;
INSERT INTO FRIENDS (ID, NAME, TEL) 
    VALUES (SEQ_FRIENDS.NEXTVAL, '홍길동','9994-9999');
SELECT MAX(ID) FROM FRIENDS;
INSERT INTO FRIENDS VALUES (6, '김길수','9999-7777',SYSDATE);

-- 메모게시판 테이블(글번호, 글쓴이, 글내용, 글쓴날짜와시간)
DROP TABLE MEMO;
CREATE TABLE MEMO(
    NUM NUMBER(8) PRIMARY KEY,
    WRITER VARCHAR2(20),
    CONTENT VARCHAR2(2000),
    RDATE   DATE DEFAULT SYSDATE);
DROP SEQUENCE MEMO_SEQ;
CREATE SEQUENCE MEMO_SEQ;
INSERT INTO MEMO VALUES (MEMO_SEQ.NEXTVAL, '홍','좋다',SYSDATE);
INSERT INTO MEMO VALUES (MEMO_SEQ.NEXTVAL, '박','싫다',SYSDATE);
SELECT * FROM MEMO ORDER BY RDATE DESC;

-- 1페이지에 나오는 글을 출력하시오 (페이지당 10개씩) = 최신글순서로 1~10
SELECT * FROM MEMO ORDER BY RDATE DESC; -- 1단계
SELECT ROWNUM RN, A.* FROM (SELECT * FROM MEMO ORDER BY RDATE DESC) A; -- 2단계
SELECT NUM, WRITER, CONTENT, RDATE
    FROM (SELECT ROWNUM RN, A.* FROM (SELECT * FROM MEMO ORDER BY RDATE DESC) A)
    WHERE RN BETWEEN 1 AND 10; -- 3단계
    
-- 2페이지에 나오는 글을 출력하시오 (페이지당 10개씩) = 최신글순서로 11~20
SELECT NUM, WRITER, CONTENT, RDATE
    FROM (SELECT ROWNUM RN, A.* FROM (SELECT * FROM MEMO ORDER BY RDATE DESC) A)
    WHERE RN BETWEEN 11 AND 20;


-- 출제문제
DROP SEQUENCE CUSTOMER_SEQ;
DROP TABLE CUSTOMER;
DROP TABLE CUS_LEVEL;

CREATE TABLE CUS_LEVEL(
    LEVELNO NUMBER(1) PRIMARY KEY,
    LEVELNAME VARCHAR2(10) NOT NULL);
    
CREATE TABLE CUSTOMER(
    CNO NUMBER(3) PRIMARY KEY,
    CNAME VARCHAR2(20),
    JOINDATE DATE DEFAULT SYSDATE,
    PHONE VARCHAR2(20) UNIQUE,
    POINT NUMBER(10),
    LEVELNO NUMBER(1) REFERENCES CUS_LEVEL(LEVELNO));
    
CREATE SEQUENCE CUSTOMER_SEQ MAXVALUE 999;

INSERT INTO CUS_LEVEL VALUES (1, 'VVIP');
INSERT INTO CUS_LEVEL VALUES (2, 'VIP');
INSERT INTO CUS_LEVEL VALUES (3, 'NORMAL');
INSERT INTO CUS_LEVEL VALUES (4, 'BLACK');

INSERT INTO CUSTOMER (CNO, CNAME, JOINDATE, PHONE, POINT, levelno)
    VALUES (CUSTOMER_SEQ.NEXTVAL, '홍길동', 
        TO_DATE('17/10/17','YY/MM/DD'), '010-9999-9999', 300, 1);
        
INSERT INTO CUSTOMER (CNO, CNAME, JOINDATE, PHONE, levelno)
    VALUES (CUSTOMER_SEQ.NEXTVAL, '이철수', TO_DATE('16/09/06','YY/MM/DD'), '010-9999-8888', 2);
        
INSERT INTO CUSTOMER (CNO, CNAME, JOINDATE, PHONE, POINT, levelno)
    VALUES (CUSTOMER_SEQ.NEXTVAL, '홍길순', TO_DATE('16/09/07','YY/MM/DD'), '010-9999-7777', 50, 3);
        
-- alter session set NLS_DATE_FORMAT = 'RR-MM-DD';
SELECT CNO, CNAME, TO_CHAR(JOINDATE, 'YYYY-MM-DD') JOINDATE, PHONE, POINT, LEVELNAME
    FROM CUSTOMER C, CUS_LEVEL L
    WHERE C.LEVELNO=L.LEVELNO;
    
----------------------------------------------------------------
-- 시퀀스를 이용한 주문 테이블
----------------------------------------------------------------

DROP TABLE ORDERDETAIL;
DROP TABLE ORDERS2;
DROP SEQUENCE ORDER_ONO_SEQ;

CREATE TABLE ORDERS2(
    oNO VARCHAR2(11) PRIMARY KEY,
    oDATE DATE DEFAULT SYSDATE,
    oNAME VARCHAR2(20) NOT NULL
);

SELECT * FROM ORDERS2;

-- 주문번호 앞자리 6자리 (180503) + 뒷자리 5자리는 자리는 자동증가 되도록 시퀀스 이용
CREATE SEQUENCE ORDER_ONO_SEQ MAXVALUE 99999;

-- TO_CHAR(SYSDATE, 'YYYYMMDD')+ TRIM(ORDER_ONO_SEQ.NEXTVAL);
INSERT INTO ORDERS2 (oNO, oNAME) VALUES (TO_CHAR(SYSDATE, 'YYMMDD')||TRIM(TO_CHAR(ORDER_ONO_SEQ.NEXTVAL,'00000')), 'LEOS');

INSERT INTO ORDERS2 VALUES (TO_CHAR(SYSDATE, 'YYMMDD')||TRIM(TO_CHAR(ORDER_ONO_SEQ.NEXTVAL,'00000')), SYSDATE, 'LEOS');
